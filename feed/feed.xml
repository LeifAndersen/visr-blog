<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>The VISr Blog</title>
	<subtitle>All about Visual and Interactive Syntax</subtitle>
	
	<link href="https://blog.visr.pl/feed/feed.xml" rel="self"/>
	<link href="https://blog.visr.pl/"/>
	<updated>2022-10-20T00:00:00Z</updated>
	<id>https://blog.visr.pl/</id>
	<author>
		<name></name>
		<email></email>
	</author>
	
	<entry>
		<title>Using Dependencies in VISr</title>
		<link href="https://blog.visr.pl/posts/use-deps/"/>
		<updated>2022-10-20T00:00:00Z</updated>
		<id>https://blog.visr.pl/posts/use-deps/</id>
		<content type="html">&lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC&quot; crossorigin=&quot;anonymous&quot; /&gt;
&lt;link href=&quot;https://blog.visr.pl/css/index.css&quot; rel=&quot;stylesheet&quot; /&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
&lt;p&gt;When creating and using visual and interactive syntax extensions with VISr, you
have access to the entire catalog of JavaScript (including WebAssembly and
TypeScript) libraries found on &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt;. This means your interactive-syntax
extensions can use the wide range of existing code, from &lt;a href=&quot;https://visjs.org/&quot;&gt;network layout&lt;/a&gt;
to &lt;a href=&quot;https://ocjs.org/&quot;&gt;advanced cad libraries&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post is a tutorial on how to add, and use, JavaScript dependencies to your
code. It shows you how to convert an &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt; package for elIDE, the
predominant VISr IDE. Additionally, this post points you to a directory of
pre-existing packages. By the end of this tutorial, you will have created a
small extension that stores tree-literals in your code.&lt;/p&gt;
&lt;p&gt;If you are new to VISr or elIDE, I recommend you follow &lt;a href=&quot;https://blog.visr.pl/posts/intro/index.html&quot;&gt;this introduction
tutorial&lt;/a&gt; first. It covers the basics of how to add interactive-syntax
extensions to your code, as well as how to create a simple counter extension.
You can also &lt;a href=&quot;https://www.youtube.com/watch?v=8htgAxJuK5c&quot;&gt;watch this video&lt;/a&gt; to learn about the basics of visual
and interactive syntax in general.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;the-basics&quot; tabindex=&quot;-1&quot;&gt;The Basics &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.visr.pl/posts/use-deps/#the-basics&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First thing first, you can find a list of the current set of available
dependencies by going to &lt;a href=&quot;http://deps.visr.pl/&quot;&gt;the VISr dependency page&lt;/a&gt;:&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;http://deps.visr.pl/&quot; type=&quot;button&quot; class=&quot;btn btn-large btn-info&quot;&gt;
  VISr Dependency Page
&lt;/a&gt;&lt;/center&gt;
&lt;p&gt;These are all bundles from NPM that have been pre-packaged for elIDE. Later in
this tutorial we will cover how to package new bundles. For now though, we will
install dependencies from this list.&lt;/p&gt;
&lt;h3 id=&quot;adding-dependencies-to-elide&quot; tabindex=&quot;-1&quot;&gt;Adding Dependencies to elIDE &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.visr.pl/posts/use-deps/#adding-dependencies-to-elide&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The dependency manager can be found in the &lt;code&gt;Project&lt;/code&gt; menu:&lt;/p&gt;
&lt;img alt=&quot;Project Menu&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.visr.pl/posts/use-deps/D_1JG4s9V--200.png&quot; width=&quot;200&quot; height=&quot;232&quot; /&gt;
&lt;p&gt;When opened, you will be greeted with a window like this:&lt;/p&gt;
&lt;img alt=&quot;Deps Dialog&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.visr.pl/posts/use-deps/Bl7vub4Kmv-300.png&quot; width=&quot;600&quot; height=&quot;175&quot; srcset=&quot;https://blog.visr.pl/posts/use-deps/Bl7vub4Kmv-300.png 300w, https://blog.visr.pl/posts/use-deps/Bl7vub4Kmv-600.png 600w&quot; sizes=&quot;100vw&quot; /&gt;
&lt;p&gt;This is a list of all of the dependencies in your current project. New
dependencies can be added with the &lt;code&gt;+&lt;/code&gt; button, and unneeded dependencies can be
removed with the &lt;code&gt;-&lt;/code&gt; button.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Name&lt;/code&gt; field is what you will require in your code, while the &lt;code&gt;URL&lt;/code&gt; field
instructs elIDE where to fetch the dependency from. If no URL is provided, then
a URL is referred from the dependency list at &lt;a href=&quot;http://deps.visr.pl/&quot;&gt;https://deps.visr.pl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Load?&lt;/code&gt; option tells elIDE if it should load the dependency when running the
program. Generally this option should be left on. The only time to turn it off
is when adding packages that contain only data and no executable code. At the
time of writing this, only one package fits this description:
&lt;code&gt;opencascade.wasm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For this tutorial we will need two packages: &lt;code&gt;react-graph-vis&lt;/code&gt; and
&lt;code&gt;vis-network-css&lt;/code&gt;. Once you hav added those packages press &lt;code&gt;Update&lt;/code&gt;, and elIDE
will download those packages into your project.&lt;/p&gt;
&lt;h3 id=&quot;using-in-code&quot; tabindex=&quot;-1&quot;&gt;Using in Code &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.visr.pl/posts/use-deps/#using-in-code&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With these dependencies added, you can now refer to them as you would &lt;a href=&quot;http://cljs.github.io/api/cljs.core/#ns&quot;&gt;any
ClojureScript module&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-clojurescript&quot;&gt;&lt;code class=&quot;language-clojurescript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; tree.core&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;react-graph-vis&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means you also have full access to the &lt;code&gt;:as&lt;/code&gt; and &lt;code&gt;:refer&lt;/code&gt; keywords as well.
Do note, however, that many JavaScript modules provide a &lt;code&gt;default&lt;/code&gt; export. Unfortunately, those can&#39;t be accessed directly through this mechanism. Rather, you can simply access it as a field from your required module:&lt;/p&gt;
&lt;pre class=&quot;language-clojurescript&quot;&gt;&lt;code class=&quot;language-clojurescript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; Graph &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;.-default&lt;/span&gt; react-graph-vis&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, &lt;code&gt;Graph&lt;/code&gt; comes from the &lt;a href=&quot;https://visjs.github.io/vis-network/docs/network/&quot;&gt;Vis.js Network Library&lt;/a&gt;. We can now
construct our VISr as normal:&lt;/p&gt;
&lt;pre class=&quot;language-clojurescript&quot;&gt;&lt;code class=&quot;language-clojurescript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; A Node is one of:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;;;   - {:left Node :right Node :label String}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;;;   - {:label String}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;;; A Tree is: {:root Node}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defvisr&lt;/span&gt; Tree&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;state&lt;/span&gt; root &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;elaborate-fn&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    root&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:&gt;&lt;/span&gt; Graph&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:options&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:layout&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:hierarchical&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:sortMethod&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;directed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token symbol&quot;&gt;:graph&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;convert-tree&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;root&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this tutorial, the elaborator is nothing special, it just returns the tree
as a run-time data structure. The renderer is a little more complicated, but
offloads most of the work to a &lt;code&gt;convert-tree&lt;/code&gt; helper:&lt;/p&gt;
&lt;pre class=&quot;language-clojurescript&quot;&gt;&lt;code class=&quot;language-clojurescript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn&lt;/span&gt; convert-tree &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;label &lt;span class=&quot;token symbol&quot;&gt;:label&lt;/span&gt;&lt;br /&gt;                     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;l-label &lt;span class=&quot;token symbol&quot;&gt;:label&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:as&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:left&lt;/span&gt;&lt;br /&gt;                     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;r-label &lt;span class=&quot;token symbol&quot;&gt;:label&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:as&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:right&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; left right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;l-nodes &lt;span class=&quot;token symbol&quot;&gt;:nodes&lt;/span&gt; l-edges &lt;span class=&quot;token symbol&quot;&gt;:edges&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;convert-tree&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;r-nodes &lt;span class=&quot;token symbol&quot;&gt;:nodes&lt;/span&gt; r-edges &lt;span class=&quot;token symbol&quot;&gt;:edges&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;convert-tree&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:nodes&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;concat&lt;/span&gt; l-nodes r-nodes &lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:id&lt;/span&gt; label &lt;span class=&quot;token symbol&quot;&gt;:label&lt;/span&gt; label&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;token symbol&quot;&gt;:edges&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;concat&lt;/span&gt; l-edges r-edges &lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:from&lt;/span&gt; label &lt;span class=&quot;token symbol&quot;&gt;:to&lt;/span&gt; l-label&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                                        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:from&lt;/span&gt; label &lt;span class=&quot;token symbol&quot;&gt;:to&lt;/span&gt; r-label&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:nodes&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:id&lt;/span&gt; label &lt;span class=&quot;token symbol&quot;&gt;:label&lt;/span&gt; label&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This helper can be used to draw the tree at both during edit time, and run time.
For example, here is a tree with a root node &lt;code&gt;A&lt;/code&gt;, and two leaf nodes &lt;code&gt;x&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt;:&lt;/p&gt;
&lt;img alt=&quot;A tree created with interactive syntax&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.visr.pl/posts/use-deps/7T9w_wrI6j-300.png&quot; width=&quot;300&quot; height=&quot;149&quot; /&gt;
&lt;p&gt;The astute reader may have noticed that while this project uses
&lt;code&gt;vis-network-css&lt;/code&gt;, its not actually used in the code. Instead, it is used by
&lt;code&gt;react-graph-vis&lt;/code&gt; as a peer dependency. Removing it from the dependency list
causes the tree to render improperly.&lt;/p&gt;
&lt;h2 id=&quot;packaging-new-dependencies&quot; tabindex=&quot;-1&quot;&gt;Packaging New Dependencies &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.visr.pl/posts/use-deps/#packaging-new-dependencies&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using pre-packaged dependencies is useful, but the entire catalog of existing,
and future, JavaScript libraries is much bigger. Thus it is useful to know how
to bundle nwe packages for elIDE. If you do create a package, feel free to
submit a &lt;a href=&quot;https://github.com/LeifAndersen/interactive-syntax-clojure/tree/main/scripts/shop&quot;&gt;pull request&lt;/a&gt; to add it the official dependency repository.&lt;/p&gt;
&lt;p&gt;As of right now, you can not create new elIDE packages from within elIDE.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://blog.visr.pl/posts/use-deps/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;
You will need to install three packages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://racket-lang.org/&quot;&gt;Racket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can download them seperately, or you can get them through your package
manger, such as &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; for Linux or macOS:&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;$ brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt;&lt;br /&gt;$ brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt;&lt;br /&gt;$ brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; racket&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will also need the &lt;code&gt;sml&lt;/code&gt; package from the Racket repository:&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;$ raco pkg &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; sml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, you will need the &lt;code&gt;scripts/shop&lt;/code&gt; folder from the [VISr][visr-source]
repository:&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone https://github.com/LeifAndersen/interactive-syntax-clojure&lt;br /&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; interactive-syntax-clojure/scripts/shop&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this folder, you&#39;ll notice two important files, &lt;code&gt;database.sml&lt;/code&gt; and
&lt;code&gt;build.rkt&lt;/code&gt;. The former contains the requiremets to build each package, while
the latter contains the build script itself. Enteries in &lt;code&gt;database.sml&lt;/code&gt; consist
of the package name, a corrosponding NPM package, and a javascript path within
that package. For example, the entry for &lt;code&gt;react-graph-vis&lt;/code&gt; is:&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; database.sml&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;react-graph-vis:&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;package: &lt;span class=&quot;token string&quot;&gt;&quot;react-graph-vis&quot;&lt;/span&gt; path: &lt;span class=&quot;token string&quot;&gt;&quot;lib/index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You won&#39;t need to modify the contents of &lt;code&gt;build.rkt&lt;/code&gt;, but you will need to add
your package to &lt;code&gt;database.sml&lt;/code&gt;. Once you have added the entry into the database, you can now build the dependency with &lt;code&gt;build.rkt&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;$ racket build.rkt &lt;span class=&quot;token parameter variable&quot;&gt;-v&lt;/span&gt; react-graph-vis&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once built, you will find the dependency in the newly created &lt;code&gt;deps&lt;/code&gt; folder.&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; deps/&lt;br /&gt;react-graph-vis.js&lt;br /&gt;react-graph-vis.js.LICENSE.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first file is the dependency itself, while the second file contains all of
the licenses of the libraries used to create that dependency.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot; tabindex=&quot;-1&quot;&gt;Wrapping Up &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.visr.pl/posts/use-deps/#wrapping-up&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And that&#39;s it. Now you know how to add dependencies to your projects, how to use
those dependencies when creating interactive-syntax extensions, and how to
package new JavaScript libraries into dependencies.&lt;/p&gt;
&lt;p&gt;Of course, this entire ecosystem is still under active development. We are
always interested in conributors, from simple additions to the dependency
directory, to a complete rework of the how dependencies are built. At the end of
the day, what counts is all of the cool things we can build using visual and
interactive-syntax extensions.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;This is not by design. I simply haven&#39;t figured out how to run Webpack,
the crutial component, from within a web browser. If you know how to do
this, please get in contact with me! &lt;a href=&quot;https://blog.visr.pl/posts/use-deps/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
	
	<entry>
		<title>Introducing Visual and Interactive-Syntax realized (VISr) for ClojureScript (and JavaScript)</title>
		<link href="https://blog.visr.pl/posts/intro/"/>
		<updated>2022-01-06T00:00:00Z</updated>
		<id>https://blog.visr.pl/posts/intro/</id>
		<content type="html">&lt;p&gt;Visual and interactive-syntax is a type of language-oriented programming that
allows developers to use, view, and edit portions of a textual program with
graphics. Using interactive-syntax provides the benefits of a graphical
programming language, while keeping all of the benefits of a purely textual
language. For example, the following is an example of a small network embedded
in a program:&lt;/p&gt;
&lt;img alt=&quot;Graphical network embedded in text&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.visr.pl/posts/intro/dRGrWU2Nnk-300.png&quot; width=&quot;600&quot; height=&quot;337&quot; srcset=&quot;https://blog.visr.pl/posts/intro/dRGrWU2Nnk-300.png 300w, https://blog.visr.pl/posts/intro/dRGrWU2Nnk-600.png 600w&quot; sizes=&quot;100vw&quot; /&gt;
&lt;p&gt;Interactive-syntax is backed by human readable code; the visual components
exists purely when writing and editing code. This backing means all of the tools
involved in software development work with interactive-syntax extensions. For
example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;version control, such as git, works with interactive-syntax;&lt;/li&gt;
&lt;li&gt;programs using interactive-syntax can be written and edited with your favorite
text editor or IDE;&lt;/li&gt;
&lt;li&gt;cut/copy/paste works with interactive-syntax using your operating system&#39;s
native clipboard;&lt;/li&gt;
&lt;li&gt;code analysis tools, like diff and refactor, still work with
interactive-syntax; and&lt;/li&gt;
&lt;li&gt;you can use interactive-syntax in any language or environment that supports
language-oriented programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To learn more about interactive-syntax, watch &lt;a href=&quot;https://www.youtube.com/watch?v=8htgAxJuK5c&quot;&gt;this video&lt;/a&gt; or read
&lt;a href=&quot;https://dl.acm.org/doi/10.1145/3428290&quot;&gt;the accompanying paper&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/8htgAxJuK5c&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://visr.pl/&quot;&gt;VISr (Visual and Interactive-Syntax realized) for ClojureScript&lt;/a&gt; is a
practical implementation of interactive-syntax in web browsers. The VISr
environment is a full-featured IDE that supports interactive-syntax components
called VISrs. Additionally, the VISr environment comes with a package manager
that supports &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM packages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article is a brief introduction to both the VISr environment and the
components that make up a VISrs. It discusses how to insert a VISr into code,
how to manipulate a VISr, and how to create a new types of VISr. Future articles
will discuss more advanced uses such as integrating NPM packages and using VISrs
in other languages.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;getting-started-with-visr&quot; tabindex=&quot;-1&quot;&gt;Getting started with VISr &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.visr.pl/posts/intro/#getting-started-with-visr&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Start by going to &lt;a href=&quot;https://visr.pl/&quot;&gt;visr.pl&lt;/a&gt;, which is a web-based IDE that directly
supports VISrs. Once in the IDE, press &lt;code&gt;Insert VISr&lt;/code&gt; to place a VISr at the
current cursor position. This VISr contains two buttons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clicking the first displays the VISr&#39;s visual representation, and&lt;/li&gt;
&lt;li&gt;clicking the second shows its textual representation.&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt=&quot;VISr&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.visr.pl/posts/intro/29GkAMLS2A-48.png&quot; width=&quot;48&quot; height=&quot;29&quot; /&gt;
&lt;p&gt;Opening the code shows that the new VISr is an instance of
&lt;code&gt;visr.core/empty-visr&lt;/code&gt;, a default VISr provided by the IDE. This VISr expects a
map with the key &lt;code&gt;:message&lt;/code&gt; to display in the visual view. Changing the value
associated with &lt;code&gt;:message&lt;/code&gt; changes what is displayed, in this case &amp;quot;Endless
Possibility&amp;quot;:&lt;/p&gt;
&lt;img alt=&quot;Open VISr&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.visr.pl/posts/intro/4FuFkW5abk-300.png&quot; width=&quot;300&quot; height=&quot;43&quot; /&gt;
&lt;p&gt;Remember that, although this VISr is displayed graphically, it still exists as
human-readable text. One way to see this text is by copying and pasting the
VISr. A copy of the same VISr will appear when it is placed back into the IDE.
However, pasting it into other text editors that do not natively support VISrs
yields the following human readable, and editable, text:&lt;/p&gt;
&lt;pre class=&quot;language-clojurescript&quot;&gt;&lt;code class=&quot;language-clojurescript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:editor&lt;/span&gt; visr.core/empty-visr&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;visr.core/empty-visr+elaborate&lt;/span&gt;&lt;br /&gt;                                 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:message&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Endless Possibility&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This operation works in reverse too. Writing out similar text and pasting it
into &lt;a href=&quot;https://visr.pl/&quot;&gt;visr.pl&lt;/a&gt; yields its visual representation.&lt;/p&gt;
&lt;h2 id=&quot;making-a-new-visr&quot; tabindex=&quot;-1&quot;&gt;Making a new VISr &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.visr.pl/posts/intro/#making-a-new-visr&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;defvisr&lt;/code&gt; form creates a VISr type. This form expects two methods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a &lt;code&gt;render&lt;/code&gt; method that provides visualization and interaction when code is
edited, and&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;elaborate&lt;/code&gt;/&lt;code&gt;elaborate-fn&lt;/code&gt; method that gives the VISr compile-time and
run-time semantics.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following is the signature for a simple VISr type:&lt;/p&gt;
&lt;pre class=&quot;language-clojurescript&quot;&gt;&lt;code class=&quot;language-clojurescript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; example.core&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defvisr&lt;/span&gt; Counter&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;elaborate-fn&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;TODO-elaborate&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;TODO-render&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example uses &lt;code&gt;elaborate-fn&lt;/code&gt;, a simplified version of &lt;code&gt;elaborate&lt;/code&gt; that gives
the &lt;code&gt;VISr&lt;/code&gt; the same semantics as a function application. It also allows the
&lt;code&gt;defvisr&lt;/code&gt; form to work in the same file as the VISr itself.&lt;/p&gt;
&lt;img alt=&quot;Example of elaborate-fn semantics&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.visr.pl/posts/intro/Cpim81h-RI-300.png&quot; width=&quot;600&quot; height=&quot;337&quot; srcset=&quot;https://blog.visr.pl/posts/intro/Cpim81h-RI-300.png 300w, https://blog.visr.pl/posts/intro/Cpim81h-RI-600.png 600w&quot; sizes=&quot;100vw&quot; /&gt;
&lt;h2 id=&quot;the-render-method-for-edit-time-semantics&quot; tabindex=&quot;-1&quot;&gt;The Render Method for Edit-Time Semantics &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.visr.pl/posts/intro/#the-render-method-for-edit-time-semantics&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;render&lt;/code&gt; method is given the VISr state &lt;a href=&quot;https://clojure.org/reference/atoms&quot;&gt;as an atom&lt;/a&gt;; updating this
atom also updates the code to reflect the new state. The return value for
&lt;code&gt;render&lt;/code&gt; must be a &lt;a href=&quot;https://reagent-project.github.io/&quot;&gt;Reagent form&lt;/a&gt; that is the visual view for the VISr.
A render method for a counter VISr might look as follows:&lt;/p&gt;
&lt;pre class=&quot;language-clojurescript&quot;&gt;&lt;code class=&quot;language-clojurescript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:button&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:on-click&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;swap!&lt;/span&gt; this inc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in action:&lt;/p&gt;
&lt;img alt=&quot;Simple Count Example&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.visr.pl/posts/intro/gEM9kSBBOJ-300.png&quot; width=&quot;600&quot; height=&quot;337&quot; srcset=&quot;https://blog.visr.pl/posts/intro/gEM9kSBBOJ-300.png 300w, https://blog.visr.pl/posts/intro/gEM9kSBBOJ-600.png 600w&quot; sizes=&quot;100vw&quot; /&gt;
&lt;p&gt;This VISr doesn&#39;t match the theme of the page; it also requires the state to be
a single number. Using &lt;a href=&quot;https://react-bootstrap.github.io/&quot;&gt;React Bootstrap&lt;/a&gt; and Reagent cursors
fixes both of these issues:&lt;/p&gt;
&lt;pre class=&quot;language-clojurescript&quot;&gt;&lt;code class=&quot;language-clojurescript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; example.core&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;reagent.core &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cursor&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;react-bootstrap &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Button&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defvisr&lt;/span&gt; Counter&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;elaborate-fn&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;TODO-elaborate&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cursor&lt;/span&gt; this &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;when-not&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;count &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reset!&lt;/span&gt; count &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:&gt;&lt;/span&gt; Button &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:on-click&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;swap!&lt;/span&gt; count inc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;elaboration-and-run-time-semantics&quot; tabindex=&quot;-1&quot;&gt;Elaboration and Run-Time Semantics &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.visr.pl/posts/intro/#elaboration-and-run-time-semantics&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The elaborate method takes the VISr state, and is expected to provide a
compile-time or run-time semantics. In the simplified case of &lt;code&gt;elaborate-fn&lt;/code&gt;,
the VISr semantics takes the form of a function application:&lt;/p&gt;
&lt;pre class=&quot;language-clojurescript&quot;&gt;&lt;code class=&quot;language-clojurescript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;elaborate-fn&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;elaborate&lt;/code&gt; method expects a dictionary with the key &lt;code&gt;:count&lt;/code&gt; and returns
the value associated with that key. It makes use of &lt;a href=&quot;https://clojure.org/guides/destructuring&quot;&gt;ClojureScript&#39;s
Destructuring&lt;/a&gt; for brevity. The following code is equivalent:&lt;/p&gt;
&lt;pre class=&quot;language-clojurescript&quot;&gt;&lt;code class=&quot;language-clojurescript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;elaborate-fn&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; this &lt;span class=&quot;token symbol&quot;&gt;:count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;putting-it-all-together&quot; tabindex=&quot;-1&quot;&gt;Putting it all together &lt;a class=&quot;direct-link&quot; href=&quot;https://blog.visr.pl/posts/intro/#putting-it-all-together&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The final result is:&lt;/p&gt;
&lt;pre class=&quot;language-clojurescript&quot;&gt;&lt;code class=&quot;language-clojurescript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; test.core&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;reagent.core &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cursor&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;react-bootstrap &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Button&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defvisr&lt;/span&gt; Counter&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;elaborate-fn&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cursor&lt;/span&gt; this &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;when-not&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;count &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reset!&lt;/span&gt; count &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:&gt;&lt;/span&gt; Button &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:on-click&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;swap!&lt;/span&gt; count inc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the VISr in action:&lt;/p&gt;
&lt;img alt=&quot;Full Count Example&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://blog.visr.pl/posts/intro/H3V63THsXG-300.png&quot; width=&quot;600&quot; height=&quot;337&quot; srcset=&quot;https://blog.visr.pl/posts/intro/H3V63THsXG-300.png 300w, https://blog.visr.pl/posts/intro/H3V63THsXG-600.png 600w&quot; sizes=&quot;100vw&quot; /&gt;
&lt;p&gt;That&#39;s all there is to it. From here, you can go to &lt;a href=&quot;https://visr.pl/&quot;&gt;visr.pl&lt;/a&gt; to make your
own programs using VISr. You can also &lt;a href=&quot;https://study.visr.pl/&quot;&gt;take this survey&lt;/a&gt;, which contains
more advanced example uses for VISr. If you find any bugs or want to contribute,
you can also head to &lt;a href=&quot;https://github.com/LeifAndersen/interactive-syntax-clojure&quot;&gt;the visr project page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading, happy coding!&lt;/p&gt;
</content>
	</entry>
</feed>
